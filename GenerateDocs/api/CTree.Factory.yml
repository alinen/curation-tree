### YamlMime:ManagedReference
items:
- uid: CTree.Factory
  commentId: T:CTree.Factory
  id: Factory
  parent: CTree
  children:
  - CTree.Factory.Add(CTree.World,System.String)
  - CTree.Factory.ChangeColor(CTree.World,System.String)
  - CTree.Factory.Create(CTree.World,System.String)
  - CTree.Factory.Fade(CTree.World,System.String)
  - CTree.Factory.Grow(CTree.World,System.String)
  - CTree.Factory.Hide(CTree.World,System.String)
  - CTree.Factory.Highlight(CTree.World,System.String)
  - CTree.Factory.If(CTree.World,System.String)
  - CTree.Factory.IfClick(CTree.World,System.String)
  - CTree.Factory.IfDragEnter(CTree.World,System.String)
  - CTree.Factory.IfDragExit(CTree.World,System.String)
  - CTree.Factory.IfDrop(CTree.World,System.String)
  - CTree.Factory.IfEnter(CTree.World,System.String)
  - CTree.Factory.IfExit(CTree.World,System.String)
  - CTree.Factory.IfPickup(CTree.World,System.String)
  - CTree.Factory.InitClickable(CTree.World,System.String)
  - CTree.Factory.InitDraggable(CTree.World,System.String)
  - CTree.Factory.InitLocation(CTree.World,System.String)
  - CTree.Factory.Move(CTree.World,System.String)
  - CTree.Factory.Parallel(CTree.World,System.String)
  - CTree.Factory.PlayAnimation(CTree.World,System.String)
  - CTree.Factory.PlaySound(CTree.World,System.String)
  - CTree.Factory.Pulse(CTree.World,System.String)
  - CTree.Factory.Repeat(CTree.World,System.String)
  - CTree.Factory.RepeatWhile(CTree.World,System.String)
  - CTree.Factory.RevertColor(CTree.World,System.String)
  - CTree.Factory.Select(CTree.World,System.String)
  - CTree.Factory.Sequence(CTree.World,System.String)
  - CTree.Factory.SetState(CTree.World,System.String)
  - CTree.Factory.SetText(CTree.World,System.String)
  - CTree.Factory.Show(CTree.World,System.String)
  - CTree.Factory.StopAnimation(CTree.World,System.String)
  - CTree.Factory.StopSound(CTree.World,System.String)
  - CTree.Factory.Wait(CTree.World,System.String)
  langs:
  - csharp
  - vb
  name: Factory
  nameWithType: Factory
  fullName: CTree.Factory
  type: Class
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Factory
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 20
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: >-
    Implements the logic for converting lines of text into instances of 

    <xref href="CTree.Behavior" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    Implements the logic for converting lines of text into behaviors. 

    The set of built-in behaviors have the following syntax in the input file. 

    Each line of input corresponds to a single behavior, created using one of the 

    functions defined in this class. There are four primary categories of basic nodes:

    control nodes (sequence, repeat, etc), events (e.g. conditionals that trigger when 

    state changes or when the user picks up or drops an object), setting global variables, 

    and changing scene state (playing animations, changing colors, moving assets, etc).
  example: []
  syntax:
    content: public static class Factory
    content.vb: Public Module Factory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: CTree.Factory.Create(CTree.World,System.String)
  commentId: M:CTree.Factory.Create(CTree.World,System.String)
  id: Create(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Create(World, string)
  nameWithType: Factory.Create(World, string)
  fullName: CTree.Factory.Create(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Create
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 33
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Given world and input text, creates a behavior
  remarks: >-
    The format for input is <code>FnName:Args</code>, where FnName corresponds to a static 

    function defined in Factory. Args is a string that contains any parameters 

    that is needed to initialize the behavior.
  example: []
  syntax:
    content: public static Behavior Create(World world, string config)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: config
      type: System.String
      description: A string with format <code>FnName:Args</code>
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Create(world As World, config As String) As Behavior
  overload: CTree.Factory.Create*
  nameWithType.vb: Factory.Create(World, String)
  fullName.vb: CTree.Factory.Create(CTree.World, String)
  name.vb: Create(World, String)
- uid: CTree.Factory.Parallel(CTree.World,System.String)
  commentId: M:CTree.Factory.Parallel(CTree.World,System.String)
  id: Parallel(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Parallel(World, string)
  nameWithType: Factory.Parallel(World, string)
  fullName: CTree.Factory.Parallel(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Parallel
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 70
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that implements parallel control.
  remarks: >-
    This behavior maintains a list of sub-behaviors that are executed simultaneously.

    The block of behaviors completes once all sub-behaviors complete. For example,

    <pre><code class="lang-csharp">Parallel:
       SubBehavior1
       SubBehavior2
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior Parallel(World w, string message)
    parameters:
    - id: w
      type: CTree.World
    - id: message
      type: System.String
      description: Unused
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Parallel(w As World, message As String) As Behavior
  overload: CTree.Factory.Parallel*
  nameWithType.vb: Factory.Parallel(World, String)
  fullName.vb: CTree.Factory.Parallel(CTree.World, String)
  name.vb: Parallel(World, String)
- uid: CTree.Factory.Sequence(CTree.World,System.String)
  commentId: M:CTree.Factory.Sequence(CTree.World,System.String)
  id: Sequence(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Sequence(World, string)
  nameWithType: Factory.Sequence(World, string)
  fullName: CTree.Factory.Sequence(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Sequence
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 91
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that implements sequential control
  remarks: >-
    This behavior maintains a list of sub-behaviors that are executed in sequence.

    The block of behaviors completes once all sub-behaviors complete. For example,

    <pre><code class="lang-csharp">Sequence:
       SubBehavior1
       SubBehavior2
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior Sequence(World world, string dummy)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: dummy
      type: System.String
      description: Unused
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Sequence(world As World, dummy As String) As Behavior
  overload: CTree.Factory.Sequence*
  nameWithType.vb: Factory.Sequence(World, String)
  fullName.vb: CTree.Factory.Sequence(CTree.World, String)
  name.vb: Sequence(World, String)
- uid: CTree.Factory.Select(CTree.World,System.String)
  commentId: M:CTree.Factory.Select(CTree.World,System.String)
  id: Select(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Select(World, string)
  nameWithType: Factory.Select(World, string)
  fullName: CTree.Factory.Select(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Select
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 117
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that selects one behavior of a set to execute
  remarks: >-
    This behavior maintains a list of sub-behaviors where the first sub-behavior to 

    return tree is executed. 

    <pre><code class="lang-csharp">Select:
       If: HasKey, 1
          OpenCade
       End
       If: HasKey, 0
          CloseDoor
       End
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior Select(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Unused
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function [Select](world As World, args As String) As Behavior
  overload: CTree.Factory.Select*
  nameWithType.vb: Factory.Select(World, String)
  fullName.vb: CTree.Factory.Select(CTree.World, String)
  name.vb: Select(World, String)
- uid: CTree.Factory.Repeat(CTree.World,System.String)
  commentId: M:CTree.Factory.Repeat(CTree.World,System.String)
  id: Repeat(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Repeat(World, string)
  nameWithType: Factory.Repeat(World, string)
  fullName: CTree.Factory.Repeat(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Repeat
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 137
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that repeats a set of behaviors
  remarks: >-
    This behavior maintains a list of sub-behaviors that run in parallel. For example,

    <pre><code class="lang-csharp">Repeat:
       SubBehavior1
       SubBehavior2
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior Repeat(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Unused
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Repeat(world As World, args As String) As Behavior
  overload: CTree.Factory.Repeat*
  nameWithType.vb: Factory.Repeat(World, String)
  fullName.vb: CTree.Factory.Repeat(CTree.World, String)
  name.vb: Repeat(World, String)
- uid: CTree.Factory.RepeatWhile(CTree.World,System.String)
  commentId: M:CTree.Factory.RepeatWhile(CTree.World,System.String)
  id: RepeatWhile(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: RepeatWhile(World, string)
  nameWithType: Factory.RepeatWhile(World, string)
  fullName: CTree.Factory.RepeatWhile(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: RepeatWhile
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 163
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that repeats behaviors for as long as the condition remains true
  remarks: >-
    This behavior maintains a list of sub-behaviors that run in parallel. For example,

    <pre><code class="lang-csharp">RepeatWhile: VariableName, 0
       SubBehavior1
       SubBehavior2
       IfClick: AssetName
          # Changes state so we exit and finish the behavior
          SetState: VariableName, 1
       End
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior RepeatWhile(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Unused
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function RepeatWhile(world As World, args As String) As Behavior
  overload: CTree.Factory.RepeatWhile*
  nameWithType.vb: Factory.RepeatWhile(World, String)
  fullName.vb: CTree.Factory.RepeatWhile(CTree.World, String)
  name.vb: RepeatWhile(World, String)
- uid: CTree.Factory.If(CTree.World,System.String)
  commentId: M:CTree.Factory.If(CTree.World,System.String)
  id: If(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: If(World, string)
  nameWithType: Factory.If(World, string)
  fullName: CTree.Factory.If(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: If
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 193
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the conditional is true
  remarks: >-
    The behavior completes immediately if the conditional is false. If the condition is 

    true, the behavior completes when all sub-behaviors complete. All sub-behaviors run 

    in parallel.

    <pre><code class="lang-csharp">If: Solved, 1
      DoStuff
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior If(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function [If](world As World, args As String) As Behavior
  overload: CTree.Factory.If*
  nameWithType.vb: Factory.If(World, String)
  fullName.vb: CTree.Factory.If(CTree.World, String)
  name.vb: If(World, String)
- uid: CTree.Factory.IfClick(CTree.World,System.String)
  commentId: M:CTree.Factory.IfClick(CTree.World,System.String)
  id: IfClick(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfClick(World, string)
  nameWithType: Factory.IfClick(World, string)
  fullName: CTree.Factory.IfClick(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfClick
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 219
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the player clicks on an interactable object
  remarks: >-
    Executes all sub-behaviors in parallel if the user clicks the given scene object.

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfClick: AssetName
       DoStuff
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfClick(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfClick(world As World, args As String) As Behavior
  overload: CTree.Factory.IfClick*
  nameWithType.vb: Factory.IfClick(World, String)
  fullName.vb: CTree.Factory.IfClick(CTree.World, String)
  name.vb: IfClick(World, String)
- uid: CTree.Factory.IfDrop(CTree.World,System.String)
  commentId: M:CTree.Factory.IfDrop(CTree.World,System.String)
  id: IfDrop(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfDrop(World, string)
  nameWithType: Factory.IfDrop(World, string)
  fullName: CTree.Factory.IfDrop(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfDrop
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 241
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if player drops an interactable on a specific location
  remarks: >-
    Executes all sub-behaviors in parallel if the user drops the specified asset on 

    another asset. 

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfDrop: PickUpAsset, DropTarget
       DoStuff
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfDrop(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfDrop(world As World, args As String) As Behavior
  overload: CTree.Factory.IfDrop*
  nameWithType.vb: Factory.IfDrop(World, String)
  fullName.vb: CTree.Factory.IfDrop(CTree.World, String)
  name.vb: IfDrop(World, String)
- uid: CTree.Factory.IfEnter(CTree.World,System.String)
  commentId: M:CTree.Factory.IfEnter(CTree.World,System.String)
  id: IfEnter(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfEnter(World, string)
  nameWithType: Factory.IfEnter(World, string)
  fullName: CTree.Factory.IfEnter(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfEnter
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 265
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the player hovers on top of an interactable object
  remarks: >-
    Executes all sub-behaviors in parallel if the user hovers the mouse over the specified scene object.

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfEnter: AssetName
       ChangeColor: AssetName, #FFFF00FF, 0.1
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfEnter(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfEnter(world As World, args As String) As Behavior
  overload: CTree.Factory.IfEnter*
  nameWithType.vb: Factory.IfEnter(World, String)
  fullName.vb: CTree.Factory.IfEnter(CTree.World, String)
  name.vb: IfEnter(World, String)
- uid: CTree.Factory.IfExit(CTree.World,System.String)
  commentId: M:CTree.Factory.IfExit(CTree.World,System.String)
  id: IfExit(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfExit(World, string)
  nameWithType: Factory.IfExit(World, string)
  fullName: CTree.Factory.IfExit(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfExit
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 286
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the play stops hovering over an object
  remarks: >-
    Executes all sub-behaviors in parallel if the user hovers the mouse over the specified scene object.

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfExit: AssetName
       RevertColor: AssetName, 0.1
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfExit(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfExit(world As World, args As String) As Behavior
  overload: CTree.Factory.IfExit*
  nameWithType.vb: Factory.IfExit(World, String)
  fullName.vb: CTree.Factory.IfExit(CTree.World, String)
  name.vb: IfExit(World, String)
- uid: CTree.Factory.IfDragEnter(CTree.World,System.String)
  commentId: M:CTree.Factory.IfDragEnter(CTree.World,System.String)
  id: IfDragEnter(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfDragEnter(World, string)
  nameWithType: Factory.IfDragEnter(World, string)
  fullName: CTree.Factory.IfDragEnter(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfDragEnter
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 308
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the player drags an interactable on to of a location
  remarks: >-
    Executes all sub-behaviors (parallel) if the user drags one object on top of 

    a potential drop target

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfDragEnter: PickUpAsset, DropTarget
       ChangeColor: DropTarget, #0000FFFF, 2.0
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfDragEnter(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfDragEnter(world As World, args As String) As Behavior
  overload: CTree.Factory.IfDragEnter*
  nameWithType.vb: Factory.IfDragEnter(World, String)
  fullName.vb: CTree.Factory.IfDragEnter(CTree.World, String)
  name.vb: IfDragEnter(World, String)
- uid: CTree.Factory.IfDragExit(CTree.World,System.String)
  commentId: M:CTree.Factory.IfDragExit(CTree.World,System.String)
  id: IfDragExit(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfDragExit(World, string)
  nameWithType: Factory.IfDragExit(World, string)
  fullName: CTree.Factory.IfDragExit(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfDragExit
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 333
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the player stops dragging an object on a location
  remarks: >-
    Executes all sub-behaviors (parallel) if the user drags one object on top of 

    a potential drop target

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfDragExit: PickUpAsset, DropTarget
       RevertColor: DropTarget, 0.1
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfDragExit(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfDragExit(world As World, args As String) As Behavior
  overload: CTree.Factory.IfDragExit*
  nameWithType.vb: Factory.IfDragExit(World, String)
  fullName.vb: CTree.Factory.IfDragExit(CTree.World, String)
  name.vb: IfDragExit(World, String)
- uid: CTree.Factory.IfPickup(CTree.World,System.String)
  commentId: M:CTree.Factory.IfPickup(CTree.World,System.String)
  id: IfPickup(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: IfPickup(World, string)
  nameWithType: Factory.IfPickup(World, string)
  fullName: CTree.Factory.IfPickup(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: IfPickup
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 357
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Execute a set of behaviors if the player picks up an object
  remarks: >-
    Executes all sub-behaviors in parallel if the user picks up the give object. 

    Otherwise, the condition is false and the behavior completes immediately.

    <pre><code class="lang-csharp">IfPickup: AssetName
       DoStuff
    End</code></pre>
  example: []
  syntax:
    content: public static Behavior IfPickup(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for specifying the conditional
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function IfPickup(world As World, args As String) As Behavior
  overload: CTree.Factory.IfPickup*
  nameWithType.vb: Factory.IfPickup(World, String)
  fullName.vb: CTree.Factory.IfPickup(CTree.World, String)
  name.vb: IfPickup(World, String)
- uid: CTree.Factory.Wait(CTree.World,System.String)
  commentId: M:CTree.Factory.Wait(CTree.World,System.String)
  id: Wait(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Wait(World, string)
  nameWithType: Factory.Wait(World, string)
  fullName: CTree.Factory.Wait(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Wait
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 380
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that waits for a specified amount of time (e.g. pauses)
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Wait: Duration</code></pre>

    For example, <code>Wait: 1.0</code> pauses for one second. The behavior completes when the duration as passed.
  example: []
  syntax:
    content: public static Behavior Wait(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Wait(world As World, args As String) As Behavior
  overload: CTree.Factory.Wait*
  nameWithType.vb: Factory.Wait(World, String)
  fullName.vb: CTree.Factory.Wait(CTree.World, String)
  name.vb: Wait(World, String)
- uid: CTree.Factory.PlaySound(CTree.World,System.String)
  commentId: M:CTree.Factory.PlaySound(CTree.World,System.String)
  id: PlaySound(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: PlaySound(World, string)
  nameWithType: Factory.PlaySound(World, string)
  fullName: CTree.Factory.PlaySound(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: PlaySound
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 404
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that plays a sound
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">PlaySound: AssetName</code></pre>

    For example, <code>PlaySound: MoveSound</code> plays sound on the asset MoveSound.

    MoveSound should have an AudioSource component on it. 

    The behavior completes when the Sound is complete (note: looped sounds play forever).
  example: []
  syntax:
    content: public static Behavior PlaySound(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function PlaySound(w As World, config As String) As Behavior
  overload: CTree.Factory.PlaySound*
  nameWithType.vb: Factory.PlaySound(World, String)
  fullName.vb: CTree.Factory.PlaySound(CTree.World, String)
  name.vb: PlaySound(World, String)
- uid: CTree.Factory.StopSound(CTree.World,System.String)
  commentId: M:CTree.Factory.StopSound(CTree.World,System.String)
  id: StopSound(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: StopSound(World, string)
  nameWithType: Factory.StopSound(World, string)
  fullName: CTree.Factory.StopSound(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: StopSound
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 424
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that stops an animation.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">StopSound: AssetName</code></pre>

    For example, <code>StopSound: Music</code> stops the AudioSource component on 

    the asset with name <code>Music</code>.
  example: []
  syntax:
    content: public static Behavior StopSound(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function StopSound(w As World, config As String) As Behavior
  overload: CTree.Factory.StopSound*
  nameWithType.vb: Factory.StopSound(World, String)
  fullName.vb: CTree.Factory.StopSound(CTree.World, String)
  name.vb: StopSound(World, String)
- uid: CTree.Factory.PlayAnimation(CTree.World,System.String)
  commentId: M:CTree.Factory.PlayAnimation(CTree.World,System.String)
  id: PlayAnimation(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: PlayAnimation(World, string)
  nameWithType: Factory.PlayAnimation(World, string)
  fullName: CTree.Factory.PlayAnimation(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: PlayAnimation
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 445
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that plays an animation
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">PlayAnimation: AssetName, AnimationName</code></pre>

    For example, <code>PlayAnimation: Squirrel, Dance</code> plays the dance animation on the asset <code>Squirrel</code>.

    The behavior completes when the animation is complete.
  example: []
  syntax:
    content: public static Behavior PlayAnimation(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function PlayAnimation(w As World, config As String) As Behavior
  overload: CTree.Factory.PlayAnimation*
  nameWithType.vb: Factory.PlayAnimation(World, String)
  fullName.vb: CTree.Factory.PlayAnimation(CTree.World, String)
  name.vb: PlayAnimation(World, String)
- uid: CTree.Factory.StopAnimation(CTree.World,System.String)
  commentId: M:CTree.Factory.StopAnimation(CTree.World,System.String)
  id: StopAnimation(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: StopAnimation(World, string)
  nameWithType: Factory.StopAnimation(World, string)
  fullName: CTree.Factory.StopAnimation(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: StopAnimation
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 466
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that stops an animation.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">StopAnimation: AssetName, AnimationName</code></pre>

    For example, <code>StopAnimation: Squirrel, Dance</code> stops the dance animation for <code>Squirrel</code>.
  example: []
  syntax:
    content: public static Behavior StopAnimation(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function StopAnimation(w As World, config As String) As Behavior
  overload: CTree.Factory.StopAnimation*
  nameWithType.vb: Factory.StopAnimation(World, String)
  fullName.vb: CTree.Factory.StopAnimation(CTree.World, String)
  name.vb: StopAnimation(World, String)
- uid: CTree.Factory.Show(CTree.World,System.String)
  commentId: M:CTree.Factory.Show(CTree.World,System.String)
  id: Show(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Show(World, string)
  nameWithType: Factory.Show(World, string)
  fullName: CTree.Factory.Show(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Show
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 488
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that enabled a GameObject
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Show: AssetName</code></pre>

    For example, <code>Show: Squirrel</code> enables the GameObjet with name Squirrel. 

    This will show the asset's geometry and activate any components on it.
  example: []
  syntax:
    content: public static Behavior Show(World world, string objName)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: objName
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Show(world As World, objName As String) As Behavior
  overload: CTree.Factory.Show*
  nameWithType.vb: Factory.Show(World, String)
  fullName.vb: CTree.Factory.Show(CTree.World, String)
  name.vb: Show(World, String)
- uid: CTree.Factory.Hide(CTree.World,System.String)
  commentId: M:CTree.Factory.Hide(CTree.World,System.String)
  id: Hide(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Hide(World, string)
  nameWithType: Factory.Hide(World, string)
  fullName: CTree.Factory.Hide(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Hide
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 512
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that hides a GameObject.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Hide: AssetName</code></pre>

    For example, <code>Hide: Squirrel</code> will hide the geometry associated with <code>Squirrel</code>

    and disable its associaed components.
  example: []
  syntax:
    content: public static Behavior Hide(World world, string objName)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: objName
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Hide(world As World, objName As String) As Behavior
  overload: CTree.Factory.Hide*
  nameWithType.vb: Factory.Hide(World, String)
  fullName.vb: CTree.Factory.Hide(CTree.World, String)
  name.vb: Hide(World, String)
- uid: CTree.Factory.SetText(CTree.World,System.String)
  commentId: M:CTree.Factory.SetText(CTree.World,System.String)
  id: SetText(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: SetText(World, string)
  nameWithType: Factory.SetText(World, string)
  fullName: CTree.Factory.SetText(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: SetText
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 535
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that changes the text on an object.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">SetText: AssetName, NewText</code></pre>

    For example, <code>SetText: UItext, Hello, World!</code> will set the contents of <code>UIText</code> to the 

    string "Hello, World!" The behavior completes in one frame.
  example: []
  syntax:
    content: public static Behavior SetText(World world, string config)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function SetText(world As World, config As String) As Behavior
  overload: CTree.Factory.SetText*
  nameWithType.vb: Factory.SetText(World, String)
  fullName.vb: CTree.Factory.SetText(CTree.World, String)
  name.vb: SetText(World, String)
- uid: CTree.Factory.RevertColor(CTree.World,System.String)
  commentId: M:CTree.Factory.RevertColor(CTree.World,System.String)
  id: RevertColor(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: RevertColor(World, string)
  nameWithType: Factory.RevertColor(World, string)
  fullName: CTree.Factory.RevertColor(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: RevertColor
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 561
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that reverts to an asset's original color.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">RevertColor: AssetName, Duration</code></pre>

    For example, <code>RevertColor: Star</code> will revert the color of the asset <code>Star</code> to 

    its original color, over the given duration.
  example: []
  syntax:
    content: public static Behavior RevertColor(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function RevertColor(w As World, config As String) As Behavior
  overload: CTree.Factory.RevertColor*
  nameWithType.vb: Factory.RevertColor(World, String)
  fullName.vb: CTree.Factory.RevertColor(CTree.World, String)
  name.vb: RevertColor(World, String)
- uid: CTree.Factory.ChangeColor(CTree.World,System.String)
  commentId: M:CTree.Factory.ChangeColor(CTree.World,System.String)
  id: ChangeColor(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: ChangeColor(World, string)
  nameWithType: Factory.ChangeColor(World, string)
  fullName: CTree.Factory.ChangeColor(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: ChangeColor
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 589
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that changes an asset's color.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">ChangeColor: AssetName, #RGBA, Duration</code></pre>

    For example, <code>ChangeColor: Star, #FF0000FF, 2.0</code> will change the color of <code>Star</code> to 

    the color (1,0,0), or Red. Colors should be in the range 0 and 1. The duration indicates the 

    length of the transition. The first time <code>ChangeColor</code> is called, we cache the original 

    colors s we can revert them later.
  example: []
  syntax:
    content: public static Behavior ChangeColor(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function ChangeColor(w As World, config As String) As Behavior
  overload: CTree.Factory.ChangeColor*
  nameWithType.vb: Factory.ChangeColor(World, String)
  fullName.vb: CTree.Factory.ChangeColor(CTree.World, String)
  name.vb: ChangeColor(World, String)
- uid: CTree.Factory.Pulse(CTree.World,System.String)
  commentId: M:CTree.Factory.Pulse(CTree.World,System.String)
  id: Pulse(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Pulse(World, string)
  nameWithType: Factory.Pulse(World, string)
  fullName: CTree.Factory.Pulse(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Pulse
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 619
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that pulses the size of an asset.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Pulse: AssetName, NumTimes, PulseSpeed, PulseGrowth</code></pre>

    For example, <code>Pulse: Star, 2, 0.4, 0.1</code> will pulse the asset <code>Star</code>

    twice. Each pulse will last 0.4 seconds and will increase the size by 10%. 

    The PulseSpeed and PulseGrowth are option. The default PulseSpeed is 0.4 seconds.

    The default PulseGrowth is 0.1, or 10%.
  example: []
  syntax:
    content: public static Behavior Pulse(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Pulse(world As World, args As String) As Behavior
  overload: CTree.Factory.Pulse*
  nameWithType.vb: Factory.Pulse(World, String)
  fullName.vb: CTree.Factory.Pulse(CTree.World, String)
  name.vb: Pulse(World, String)
- uid: CTree.Factory.Move(CTree.World,System.String)
  commentId: M:CTree.Factory.Move(CTree.World,System.String)
  id: Move(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Move(World, string)
  nameWithType: Factory.Move(World, string)
  fullName: CTree.Factory.Move(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Move
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 653
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that moves an asset (both position and rotation) between two waypoints.
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Move: AssetName, Waypoint1, Waypoint2, Duration, InterpolationType</code></pre>

    For example, <code>Move: Star, Waypoint1, Waypoint2, Duration, Cosine</code> will animate 

    asset <code>Star</code> so it starts with the position and rotation of <code>Waypoint1</code> and 

    ends with the position and rotation of <code>Waypoint2</code>. The Duration is the length of 

    the transition in seconds. The <code>InterpolationType</code> is optional and specifies the shape of the curve 

    between the start and end points. Supported choices for <code>InterpolationType</code> are 

    "Linear", "Cosine", and "EaseIn". The default is "Linear".
  example: []
  syntax:
    content: public static Behavior Move(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Move(w As World, config As String) As Behavior
  overload: CTree.Factory.Move*
  nameWithType.vb: Factory.Move(World, String)
  fullName.vb: CTree.Factory.Move(CTree.World, String)
  name.vb: Move(World, String)
- uid: CTree.Factory.Grow(CTree.World,System.String)
  commentId: M:CTree.Factory.Grow(CTree.World,System.String)
  id: Grow(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Grow(World, string)
  nameWithType: Factory.Grow(World, string)
  fullName: CTree.Factory.Grow(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Grow
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 690
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that modifies the size of an asset
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Grow: AssetName, StartSize, EndSize, Duration</code></pre>

    For example, <code>Grow: Star, 1, 2, 4.0</code> will increase the size of the asset <code>Star</code> 

    from its original size to twice the size over 4.0 seconds.
  example: []
  syntax:
    content: public static Behavior Grow(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Grow(w As World, config As String) As Behavior
  overload: CTree.Factory.Grow*
  nameWithType.vb: Factory.Grow(World, String)
  fullName.vb: CTree.Factory.Grow(CTree.World, String)
  name.vb: Grow(World, String)
- uid: CTree.Factory.Fade(CTree.World,System.String)
  commentId: M:CTree.Factory.Fade(CTree.World,System.String)
  id: Fade(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Fade(World, string)
  nameWithType: Factory.Fade(World, string)
  fullName: CTree.Factory.Fade(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Fade
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 720
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that changes the transparency of an asset
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Fade: AssetName, StartAlpha, EndAlpha, Duration</code></pre>

    For example, <code>Fade: Star, 0, 1, 2.0</code> will change the transparency of the asset 

    <code>Star</code> from 0 (invisible) to 1 (opaque) over 2 seconds.
  example: []
  syntax:
    content: public static Behavior Fade(World w, string config)
    parameters:
    - id: w
      type: CTree.World
    - id: config
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Fade(w As World, config As String) As Behavior
  overload: CTree.Factory.Fade*
  nameWithType.vb: Factory.Fade(World, String)
  fullName.vb: CTree.Factory.Fade(CTree.World, String)
  name.vb: Fade(World, String)
- uid: CTree.Factory.SetState(CTree.World,System.String)
  commentId: M:CTree.Factory.SetState(CTree.World,System.String)
  id: SetState(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: SetState(World, string)
  nameWithType: Factory.SetState(World, string)
  fullName: CTree.Factory.SetState(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: SetState
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 754
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that sets the value of a global variable
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">SetState: VariableName, VariableValue</code></pre>

    For example, <code>SetState: Solved, 1</code> will set the global variable (stored in World) with 

    name <code>Solved</code> to 1.  

    The behavior completes in one frame.
  example: []
  syntax:
    content: public static Behavior SetState(World world, string dummy)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: dummy
      type: System.String
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function SetState(world As World, dummy As String) As Behavior
  overload: CTree.Factory.SetState*
  nameWithType.vb: Factory.SetState(World, String)
  fullName.vb: CTree.Factory.SetState(CTree.World, String)
  name.vb: SetState(World, String)
- uid: CTree.Factory.Add(CTree.World,System.String)
  commentId: M:CTree.Factory.Add(CTree.World,System.String)
  id: Add(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Add(World, string)
  nameWithType: Factory.Add(World, string)
  fullName: CTree.Factory.Add(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Add
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 788
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Creates a behavior that modifies a global integer variable
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">Add: VariableName, Delta</code></pre>

    For example, <code>Add: StarCount, 1</code> will add one to the variable <code>StarCount</code>

    stored in World. The behavior completes in one frame.
  example: []
  syntax:
    content: public static Behavior Add(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Object for accessing global state.
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
      description: An instance of behavior
    content.vb: Public Shared Function Add(world As World, args As String) As Behavior
  overload: CTree.Factory.Add*
  nameWithType.vb: Factory.Add(World, String)
  fullName.vb: CTree.Factory.Add(CTree.World, String)
  name.vb: Add(World, String)
- uid: CTree.Factory.InitDraggable(CTree.World,System.String)
  commentId: M:CTree.Factory.InitDraggable(CTree.World,System.String)
  id: InitDraggable(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: InitDraggable(World, string)
  nameWithType: Factory.InitDraggable(World, string)
  fullName: CTree.Factory.InitDraggable(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: InitDraggable
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 812
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Indicates that the given asset can be dragged and dropped by the user
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">InitDraggable: AssetName</code></pre>
  example: []
  syntax:
    content: public static Behavior InitDraggable(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Accessor for global state
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
    content.vb: Public Shared Function InitDraggable(world As World, args As String) As Behavior
  overload: CTree.Factory.InitDraggable*
  nameWithType.vb: Factory.InitDraggable(World, String)
  fullName.vb: CTree.Factory.InitDraggable(CTree.World, String)
  name.vb: InitDraggable(World, String)
- uid: CTree.Factory.InitClickable(CTree.World,System.String)
  commentId: M:CTree.Factory.InitClickable(CTree.World,System.String)
  id: InitClickable(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: InitClickable(World, string)
  nameWithType: Factory.InitClickable(World, string)
  fullName: CTree.Factory.InitClickable(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: InitClickable
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 832
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Indicates that the given asset can be clicked by the user
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">InitClickable: AssetName</code></pre>
  example: []
  syntax:
    content: public static Behavior InitClickable(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Accessor for global state
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
    content.vb: Public Shared Function InitClickable(world As World, args As String) As Behavior
  overload: CTree.Factory.InitClickable*
  nameWithType.vb: Factory.InitClickable(World, String)
  fullName.vb: CTree.Factory.InitClickable(CTree.World, String)
  name.vb: InitClickable(World, String)
- uid: CTree.Factory.InitLocation(CTree.World,System.String)
  commentId: M:CTree.Factory.InitLocation(CTree.World,System.String)
  id: InitLocation(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: InitLocation(World, string)
  nameWithType: Factory.InitLocation(World, string)
  fullName: CTree.Factory.InitLocation(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: InitLocation
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 853
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: >-
    Indicates that the given asset is a location (e.g. other assets 

    can be attached to it)
  remarks: >-
    Implements the following input string

    <pre><code class="lang-csharp">InitLocation: AssetName</code></pre>
  example: []
  syntax:
    content: public static Behavior InitLocation(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Accessor for global state
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
    content.vb: Public Shared Function InitLocation(world As World, args As String) As Behavior
  overload: CTree.Factory.InitLocation*
  nameWithType.vb: Factory.InitLocation(World, String)
  fullName.vb: CTree.Factory.InitLocation(CTree.World, String)
  name.vb: InitLocation(World, String)
- uid: CTree.Factory.Highlight(CTree.World,System.String)
  commentId: M:CTree.Factory.Highlight(CTree.World,System.String)
  id: Highlight(CTree.World,System.String)
  parent: CTree.Factory
  langs:
  - csharp
  - vb
  name: Highlight(World, string)
  nameWithType: Factory.Highlight(World, string)
  fullName: CTree.Factory.Highlight(CTree.World, string)
  type: Method
  source:
    remote:
      path: BasicExample/Assets/Scripts/CurationTree/Factory.cs
      branch: squirrel-house
      repo: git@github.com:alinen/curation-tree.git
    id: Highlight
    path: ../BasicExample/Assets/Scripts/CurationTree/Factory.cs
    startLine: 877
  assemblies:
  - Assembly-CSharp
  namespace: CTree
  summary: Implements highlighting and sound effects for interactables
  remarks: >-
    Implements the following script command

    <pre><code class="lang-csharp">Highlight: SelectedColor, SelectSound, LocationHighlighClor, DropSound</code></pre>

    For example, `Highlight: #FFFF00FF, MoveSound, #00FF00F0, AnchorSound` will

    set selected objects to yellow and location highights in green. Sounds 

    will play from the AudioSources on the assets called MoveSound and AnchorSound

    respectively
  example: []
  syntax:
    content: public static Behavior Highlight(World world, string args)
    parameters:
    - id: world
      type: CTree.World
      description: Accessor for global state
    - id: args
      type: System.String
      description: Parameters for the behavior
    return:
      type: CTree.Behavior
    content.vb: Public Shared Function Highlight(world As World, args As String) As Behavior
  overload: CTree.Factory.Highlight*
  nameWithType.vb: Factory.Highlight(World, String)
  fullName.vb: CTree.Factory.Highlight(CTree.World, String)
  name.vb: Highlight(World, String)
references:
- uid: CTree.Behavior
  commentId: T:CTree.Behavior
  parent: CTree
  href: CTree.Behavior.html
  name: Behavior
  nameWithType: Behavior
  fullName: CTree.Behavior
- uid: CTree
  commentId: N:CTree
  href: CTree.html
  name: CTree
  nameWithType: CTree
  fullName: CTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CTree.Factory.Create*
  commentId: Overload:CTree.Factory.Create
  href: CTree.Factory.html#CTree_Factory_Create_CTree_World_System_String_
  name: Create
  nameWithType: Factory.Create
  fullName: CTree.Factory.Create
- uid: CTree.World
  commentId: T:CTree.World
  parent: CTree
  href: CTree.World.html
  name: World
  nameWithType: World
  fullName: CTree.World
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: CTree.Factory.Parallel*
  commentId: Overload:CTree.Factory.Parallel
  href: CTree.Factory.html#CTree_Factory_Parallel_CTree_World_System_String_
  name: Parallel
  nameWithType: Factory.Parallel
  fullName: CTree.Factory.Parallel
- uid: CTree.Factory.Sequence*
  commentId: Overload:CTree.Factory.Sequence
  href: CTree.Factory.html#CTree_Factory_Sequence_CTree_World_System_String_
  name: Sequence
  nameWithType: Factory.Sequence
  fullName: CTree.Factory.Sequence
- uid: CTree.Factory.Select*
  commentId: Overload:CTree.Factory.Select
  href: CTree.Factory.html#CTree_Factory_Select_CTree_World_System_String_
  name: Select
  nameWithType: Factory.Select
  fullName: CTree.Factory.Select
- uid: CTree.Factory.Repeat*
  commentId: Overload:CTree.Factory.Repeat
  href: CTree.Factory.html#CTree_Factory_Repeat_CTree_World_System_String_
  name: Repeat
  nameWithType: Factory.Repeat
  fullName: CTree.Factory.Repeat
- uid: CTree.Factory.RepeatWhile*
  commentId: Overload:CTree.Factory.RepeatWhile
  href: CTree.Factory.html#CTree_Factory_RepeatWhile_CTree_World_System_String_
  name: RepeatWhile
  nameWithType: Factory.RepeatWhile
  fullName: CTree.Factory.RepeatWhile
- uid: CTree.Factory.If*
  commentId: Overload:CTree.Factory.If
  href: CTree.Factory.html#CTree_Factory_If_CTree_World_System_String_
  name: If
  nameWithType: Factory.If
  fullName: CTree.Factory.If
- uid: CTree.Factory.IfClick*
  commentId: Overload:CTree.Factory.IfClick
  href: CTree.Factory.html#CTree_Factory_IfClick_CTree_World_System_String_
  name: IfClick
  nameWithType: Factory.IfClick
  fullName: CTree.Factory.IfClick
- uid: CTree.Factory.IfDrop*
  commentId: Overload:CTree.Factory.IfDrop
  href: CTree.Factory.html#CTree_Factory_IfDrop_CTree_World_System_String_
  name: IfDrop
  nameWithType: Factory.IfDrop
  fullName: CTree.Factory.IfDrop
- uid: CTree.Factory.IfEnter*
  commentId: Overload:CTree.Factory.IfEnter
  href: CTree.Factory.html#CTree_Factory_IfEnter_CTree_World_System_String_
  name: IfEnter
  nameWithType: Factory.IfEnter
  fullName: CTree.Factory.IfEnter
- uid: CTree.Factory.IfExit*
  commentId: Overload:CTree.Factory.IfExit
  href: CTree.Factory.html#CTree_Factory_IfExit_CTree_World_System_String_
  name: IfExit
  nameWithType: Factory.IfExit
  fullName: CTree.Factory.IfExit
- uid: CTree.Factory.IfDragEnter*
  commentId: Overload:CTree.Factory.IfDragEnter
  href: CTree.Factory.html#CTree_Factory_IfDragEnter_CTree_World_System_String_
  name: IfDragEnter
  nameWithType: Factory.IfDragEnter
  fullName: CTree.Factory.IfDragEnter
- uid: CTree.Factory.IfDragExit*
  commentId: Overload:CTree.Factory.IfDragExit
  href: CTree.Factory.html#CTree_Factory_IfDragExit_CTree_World_System_String_
  name: IfDragExit
  nameWithType: Factory.IfDragExit
  fullName: CTree.Factory.IfDragExit
- uid: CTree.Factory.IfPickup*
  commentId: Overload:CTree.Factory.IfPickup
  href: CTree.Factory.html#CTree_Factory_IfPickup_CTree_World_System_String_
  name: IfPickup
  nameWithType: Factory.IfPickup
  fullName: CTree.Factory.IfPickup
- uid: CTree.Factory.Wait*
  commentId: Overload:CTree.Factory.Wait
  href: CTree.Factory.html#CTree_Factory_Wait_CTree_World_System_String_
  name: Wait
  nameWithType: Factory.Wait
  fullName: CTree.Factory.Wait
- uid: CTree.Factory.PlaySound*
  commentId: Overload:CTree.Factory.PlaySound
  href: CTree.Factory.html#CTree_Factory_PlaySound_CTree_World_System_String_
  name: PlaySound
  nameWithType: Factory.PlaySound
  fullName: CTree.Factory.PlaySound
- uid: CTree.Factory.StopSound*
  commentId: Overload:CTree.Factory.StopSound
  href: CTree.Factory.html#CTree_Factory_StopSound_CTree_World_System_String_
  name: StopSound
  nameWithType: Factory.StopSound
  fullName: CTree.Factory.StopSound
- uid: CTree.Factory.PlayAnimation*
  commentId: Overload:CTree.Factory.PlayAnimation
  href: CTree.Factory.html#CTree_Factory_PlayAnimation_CTree_World_System_String_
  name: PlayAnimation
  nameWithType: Factory.PlayAnimation
  fullName: CTree.Factory.PlayAnimation
- uid: CTree.Factory.StopAnimation*
  commentId: Overload:CTree.Factory.StopAnimation
  href: CTree.Factory.html#CTree_Factory_StopAnimation_CTree_World_System_String_
  name: StopAnimation
  nameWithType: Factory.StopAnimation
  fullName: CTree.Factory.StopAnimation
- uid: CTree.Factory.Show*
  commentId: Overload:CTree.Factory.Show
  href: CTree.Factory.html#CTree_Factory_Show_CTree_World_System_String_
  name: Show
  nameWithType: Factory.Show
  fullName: CTree.Factory.Show
- uid: CTree.Factory.Hide*
  commentId: Overload:CTree.Factory.Hide
  href: CTree.Factory.html#CTree_Factory_Hide_CTree_World_System_String_
  name: Hide
  nameWithType: Factory.Hide
  fullName: CTree.Factory.Hide
- uid: CTree.Factory.SetText*
  commentId: Overload:CTree.Factory.SetText
  href: CTree.Factory.html#CTree_Factory_SetText_CTree_World_System_String_
  name: SetText
  nameWithType: Factory.SetText
  fullName: CTree.Factory.SetText
- uid: CTree.Factory.RevertColor*
  commentId: Overload:CTree.Factory.RevertColor
  href: CTree.Factory.html#CTree_Factory_RevertColor_CTree_World_System_String_
  name: RevertColor
  nameWithType: Factory.RevertColor
  fullName: CTree.Factory.RevertColor
- uid: CTree.Factory.ChangeColor*
  commentId: Overload:CTree.Factory.ChangeColor
  href: CTree.Factory.html#CTree_Factory_ChangeColor_CTree_World_System_String_
  name: ChangeColor
  nameWithType: Factory.ChangeColor
  fullName: CTree.Factory.ChangeColor
- uid: CTree.Factory.Pulse*
  commentId: Overload:CTree.Factory.Pulse
  href: CTree.Factory.html#CTree_Factory_Pulse_CTree_World_System_String_
  name: Pulse
  nameWithType: Factory.Pulse
  fullName: CTree.Factory.Pulse
- uid: CTree.Factory.Move*
  commentId: Overload:CTree.Factory.Move
  href: CTree.Factory.html#CTree_Factory_Move_CTree_World_System_String_
  name: Move
  nameWithType: Factory.Move
  fullName: CTree.Factory.Move
- uid: CTree.Factory.Grow*
  commentId: Overload:CTree.Factory.Grow
  href: CTree.Factory.html#CTree_Factory_Grow_CTree_World_System_String_
  name: Grow
  nameWithType: Factory.Grow
  fullName: CTree.Factory.Grow
- uid: CTree.Factory.Fade*
  commentId: Overload:CTree.Factory.Fade
  href: CTree.Factory.html#CTree_Factory_Fade_CTree_World_System_String_
  name: Fade
  nameWithType: Factory.Fade
  fullName: CTree.Factory.Fade
- uid: CTree.Factory.SetState*
  commentId: Overload:CTree.Factory.SetState
  href: CTree.Factory.html#CTree_Factory_SetState_CTree_World_System_String_
  name: SetState
  nameWithType: Factory.SetState
  fullName: CTree.Factory.SetState
- uid: CTree.Factory.Add*
  commentId: Overload:CTree.Factory.Add
  href: CTree.Factory.html#CTree_Factory_Add_CTree_World_System_String_
  name: Add
  nameWithType: Factory.Add
  fullName: CTree.Factory.Add
- uid: CTree.Factory.InitDraggable*
  commentId: Overload:CTree.Factory.InitDraggable
  href: CTree.Factory.html#CTree_Factory_InitDraggable_CTree_World_System_String_
  name: InitDraggable
  nameWithType: Factory.InitDraggable
  fullName: CTree.Factory.InitDraggable
- uid: CTree.Factory.InitClickable*
  commentId: Overload:CTree.Factory.InitClickable
  href: CTree.Factory.html#CTree_Factory_InitClickable_CTree_World_System_String_
  name: InitClickable
  nameWithType: Factory.InitClickable
  fullName: CTree.Factory.InitClickable
- uid: CTree.Factory.InitLocation*
  commentId: Overload:CTree.Factory.InitLocation
  href: CTree.Factory.html#CTree_Factory_InitLocation_CTree_World_System_String_
  name: InitLocation
  nameWithType: Factory.InitLocation
  fullName: CTree.Factory.InitLocation
- uid: CTree.Factory.Highlight*
  commentId: Overload:CTree.Factory.Highlight
  href: CTree.Factory.html#CTree_Factory_Highlight_CTree_World_System_String_
  name: Highlight
  nameWithType: Factory.Highlight
  fullName: CTree.Factory.Highlight
